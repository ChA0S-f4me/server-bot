import { Client, Guild, GuildChannel, GuildMember, StreamDispatcher, VoiceConnection } from 'discord.js'
import { answer, changeAnswer, emblog, log } from '../utils'
import * as ytdl from 'ytdl-core'
import * as ytsr from "ytsr";

const config = require('../config.json')

export const json =
{
	name: 'music',
	description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π',
	options: [
		{
			name: 'play',
			description: '–ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ',
			type: 2,
			options: [
				{
					name: 'youtube',
					description: '–ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑ —é—Ç—É–±–∞',
					type: 1,
					options: [
						{
							name: 'data',
							description: '–°—Å—ã–ª–∫–∞/–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ',
							type: 3,
							required: true
						}
					]
				}
			]
		},
		{
			name: 'pause',
			description: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ',
			type: 1
		},
		{
			name: 'resume',
			description: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ',
			type: 1
		},
		{
			name: 'stop',
			description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ',
			type: 1
		},
		{
			name: 'loop',
			description: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ü–∏–∫–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞',
			type: 1
		},
		{
			name: 'info',
			description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏',
			type: 1
		}
	]
}

let dispatcher: StreamDispatcher
let connection: VoiceConnection
let info =
{
	name: null,
	channel: "0",
	user: "0",
	looped: true,
	status: 0 // 0 - –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, 1 - –ü–∞—É–∑–∞, 2 - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
}

async function ply(second, interact, sender) {
	switch (second.name) {
		case 'youtube':
		{
			info.name = second.options.find(e => e.name == 'data').value

			if (sender.voice.channel) {
				connection = await sender.voice.channel.join()
			} else {
				answer(interact.id, interact.token, `–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!`)
				return
			}

			dispatcher = connection.play(ytdl(info.name, { filter: 'audioonly' }))

			const regEx = /htt(p|ps):\/\/(www\.youtube\.com\/watch\?v=[A-z0-9]+|youtu\.be\/[A-z0-9]+)/g

			if (!regEx.test(info.name))
			{
				dispatcher = connection.play(ytdl(info.name, { filter: 'audioonly' }))
			}
			else
			{
				answer(interact.id, interact.token, `–í–≤–µ–¥–∏—Ç–µ **—Å—Å—ã–ª–∫—É**!`)

				break
			}

			answer(interact.id, interact.token, `–ù–∞—á–∞—Ç–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ **${info.name}**`)

			break
		}
		case 'vk':
		{
			answer(interact.id, interact.token, `–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! [IN DEV]`)

			break
		}
	}

	dispatcher.on('finish', async () => {
		if (info.looped) { await ply(second, interact, sender)} 

		info.status = 0

		changeAnswer(interact.id, interact.token, `–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ`)
	})
}

export async function run(client: Client, interact: any, args: Object, guild: Guild, sender: GuildMember, channel: GuildChannel)
{
	if (config.blacklist.includes(sender.id))
	{
		answer(interact.id, interact.token, `–§–µ–π—Å–ø–∞–ª–º —á–µ–ª —Ç—ã –≤ –±–ª–µ–∫-–ª–∏—Å—Ç–µ`)

		return
	}
	
	const first = args[0]

	switch (first.name)
	{
		case 'play':
		{
			const second = first.options[0]

			switch (second.name)
			{
				case 'youtube':
				{
					info.name = second.options.find(e => e.name == 'data').value

					break
				}
			}

			await ply(second, interact, sender)
			
			info.user = sender.id
			info.status = 2
			info.channel = sender.voice.channel.id

			await emblog(client, '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ', config.logs_colors.info, [
				{
					name: '–ö–∞–Ω–∞–ª',
					value: `<#${info.channel}>`,
					inline: true,
				},
				{
					name: '–î–∏–¥–∂–µ–π',
					value: `<@${info.user}>`,
					inline: true,
				},
				{
					name: '–ü–µ—Å–Ω—è',
					value: info.name,
					inline: true,
				}
			])

			log(`${sender.user.tag} –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ${info.name}`)

			break
		}
		case 'pause':
		{
			if (dispatcher)
			{
				dispatcher.pause()
			}
			else
			{
				answer(interact.id, interact.token, `–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ`)

				return
			}

			answer(interact.id, interact.token, `–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ`)

			info.status = 1

			await emblog(client, '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ', config.logs_colors.info, [
				{
					name: '–ö–∞–Ω–∞–ª',
					value: `<#${info.channel}>`,
					inline: true,
				},
				{
					name: '–î–∏–¥–∂–µ–π',
					value: `<@${info.user}>`,
					inline: true,
				},
				{
					name: '–ü–µ—Å–Ω—è',
					value: info.name,
					inline: true,
				}
			])

			log(`${sender.user.tag} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ`)

			break
		}
		case 'resume':
		{
			if (dispatcher)
			{
				dispatcher.resume()
			}
			else
			{
				answer(interact.id, interact.token, `–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–µ—á–µ–≥–æ`)

				return
			}

			answer(interact.id, interact.token, `–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ`)

			info.status = 0

			await emblog(client, '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ', config.logs_colors.info, [
				{
					name: '–ö–∞–Ω–∞–ª',
					value: `<#${info.channel}>`,
					inline: true,
				},
				{
					name: '–î–∏–¥–∂–µ–π',
					value: `<@${info.user}>`,
					inline: true,
				},
				{
					name: '–ü–µ—Å–Ω—è',
					value: info.name,
					inline: true,
				}
			])

			log(`${sender.user.tag} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ`)

			break
		}
		case 'stop':
		{
			if (dispatcher && connection)
			{
				dispatcher.destroy()
				connection.disconnect()
			}
			else if (dispatcher)
			{
				dispatcher.destroy()
			}
			else if (connection)
			{
				connection.disconnect()
			}
			else
			{
				answer(interact.id, interact.token, `–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ`)
				
				return
			}

			answer(interact.id, interact.token, `–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ`)

			info.status = 0

			await emblog(client, '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ', config.logs_colors.info, [
				{
					name: '–ö–∞–Ω–∞–ª',
					value: `<#${info.channel}>`,
					inline: true,
				},
				{
					name: '–î–∏–¥–∂–µ–π',
					value: `<@${sender.user.id}>`,
					inline: true,
				},
				{
					name: '–ü–µ—Å–Ω—è',
					value: info.name,
					inline: true,
				}
			])

			log(`${sender.user.tag} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ`)

			break
		}
		case 'loop':
		{
			info.looped = !info.looped

			answer(interact.id, interact.token, `–ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ: **${info.looped}**`)

			break
		}
		case 'info':
		{
			let st = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚ùå'

			switch(info.status)
			{
				case 0:
				{
					st = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚ùå'

					break
				}
				case 1:
				{
					st = '–ü–∞—É–∑–∞ ‚è∏'

					break
				}
				case 2:
				{
					st = '–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è üé∂'

					break
				}
			}

			answer(interact.id, interact.token, `–°—Ç–∞—Ç—É—Å: **${st}**\n` +
																					`–ù–∞–∑–≤–∞–Ω–∏–µ: **${info.name}**\n` +
																					`–ö–∞–Ω–∞–ª: <#${info.channel}>\n` +
																					`–î–∏–¥–∂–µ–π: <@${info.user}>\n` +
																					`–ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ: **${info.looped}**`)
			
			break
		}
	}
}